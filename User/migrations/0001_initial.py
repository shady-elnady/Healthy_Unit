# Generated by Django 4.2.7 on 2023-12-03 15:53

import Utils.models.Methods
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import polymorphic_tree.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('Address', '0001_initial'),
        ('Language', '0001_initial'),
        ('Currency', '0001_initial'),
        ('auth', '0012_alter_user_first_name_max_length'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='Family',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Created at')),
                ('last_updated', models.DateTimeField(auto_now=True, verbose_name='Last Update')),
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(error_messages={'unique': 'Name is Used ,it must be Unique'}, max_length=50, unique=True, verbose_name='Name')),
                ('base_family', models.ForeignKey(blank=True, limit_choices_to={'base_family__isnull': True}, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='Sub_Families', to='User.family', verbose_name='Base Family')),
            ],
            options={
                'verbose_name': 'Family',
                'verbose_name_plural': 'Families',
            },
        ),
        migrations.CreateModel(
            name='kinshipRelation',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='ID')),
                ('relationship_name', models.CharField(choices=[('P', 'Parent'), ('C', 'Child'), ('S', 'Siplins'), ('M', 'Mariage')], max_length=1, verbose_name='Relationship Name')),
                ('is_only_one', models.BooleanField(default=False, verbose_name='is Only One')),
            ],
            options={
                'verbose_name': 'kinship Relation',
                'verbose_name_plural': 'kinship Relations',
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Created at')),
                ('last_updated', models.DateTimeField(auto_now=True, verbose_name='Last Update')),
                ('image', models.ImageField(blank=True, null=True, upload_to=Utils.models.Methods.upload_image_to, verbose_name='Image')),
                ('marital_status', models.CharField(blank=True, choices=[('V', 'Virgin'), ('B', 'Bachelor'), ('M', 'Married'), ('W', 'Widower'), ('D', 'Divorced')], max_length=1, null=True, verbose_name='Marital Status')),
                ('job', models.CharField(blank=True, choices=[('E', 'Engineer'), ('D', 'doctor'), ('T', 'Teacher'), ('P', 'peasant')], max_length=2, null=True, verbose_name='Job')),
                ('birth_date', models.DateField(blank=True, null=True, verbose_name='Birth Date')),
                ('gender', models.CharField(blank=True, choices=[('M', 'Male'), ('F', 'FeMale')], max_length=1, null=True, verbose_name='Gender')),
                ('address', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='%(class)s', to='Address.address', verbose_name='Address')),
                ('currency', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='Persons', to='Currency.currency', verbose_name='Currency')),
                ('family', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='Persons', to='User.family', verbose_name='Family')),
                ('language', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='Persons', to='Language.language', verbose_name='Language')),
            ],
            options={
                'verbose_name': 'Profile',
                'verbose_name_plural': 'Profiles',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Created at')),
                ('last_updated', models.DateTimeField(auto_now=True, verbose_name='Last Update')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_types', models.JSONField(blank=True, default=dict, editable=False, null=True, verbose_name='Content Types')),
                ('name', models.CharField(error_messages={'unique': 'The Name must Unique'}, max_length=100, unique=True, verbose_name='Name')),
                ('otp', models.CharField(blank=True, max_length=25, null=True, verbose_name='OTP')),
                ('national_id', models.CharField(error_messages={'unique': 'National ID must Unique'}, max_length=14, unique=True, validators=[django.core.validators.RegexValidator(message='National ID must be 14 Numbers. eg : 11111111111111', regex='^\\d{14}$')], verbose_name='National ID')),
                ('email', models.EmailField(error_messages={'unique': 'E-Mail Is Used'}, max_length=254, unique=True, verbose_name='E-mail')),
                ('mobile', models.CharField(error_messages={'unique': 'Mobile Is Used'}, max_length=16, unique=True, validators=[django.core.validators.RegexValidator(message='Mobile Number must not consist of space and requires country code. eg : +6591258565.', regex='^\\+?1?\\d{9,15}$')], verbose_name='Mobile')),
                ('is_active', models.BooleanField(default=False, verbose_name='is Active')),
                ('is_verified', models.BooleanField(default=False, verbose_name='is Verfied')),
                ('email_verified', models.BooleanField(default=False, verbose_name='E-mail Verified')),
                ('mobile_verified', models.BooleanField(default=False, verbose_name='Mobile Verified')),
                ('is_superuser', models.BooleanField(default=False, verbose_name='is Super User')),
                ('is_staff', models.BooleanField(default=False, verbose_name='is Staff')),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('parent', polymorphic_tree.models.PolymorphicTreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='children', to=settings.AUTH_USER_MODEL, verbose_name='Parent')),
                ('polymorphic_ctype', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_%(app_label)s.%(class)s_set+', to='contenttypes.contenttype')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
        ),
        migrations.CreateModel(
            name='ProfileImage',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Created at')),
                ('last_updated', models.DateTimeField(auto_now=True, verbose_name='Last Update')),
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(blank=True, null=True, upload_to=Utils.models.Methods.upload_image_to, verbose_name='Image')),
                ('position', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Position')),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s', to='User.profile', verbose_name='Profile')),
            ],
            options={
                'verbose_name': 'Profile Image',
                'verbose_name_plural': 'Profiles Images',
            },
        ),
        migrations.AddField(
            model_name='profile',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='Profile', to=settings.AUTH_USER_MODEL, verbose_name='User'),
        ),
        migrations.CreateModel(
            name='NickName',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Created at')),
                ('last_updated', models.DateTimeField(auto_now=True, verbose_name='Last Update')),
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(error_messages={'unique': 'Name is Used ,it must be Unique'}, max_length=50, unique=True, verbose_name='Name')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='Nick_Name', to='User.profile', verbose_name='User')),
            ],
            options={
                'verbose_name': 'Nick Name',
                'verbose_name_plural': 'Nick Names',
            },
        ),
        migrations.CreateModel(
            name='Kinship',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('kinship_person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Relatives', to='User.profile', verbose_name='Person')),
                ('kinshiper', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='User.profile', verbose_name='Kinshiper')),
                ('relation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Persons+', to='User.kinshiprelation', verbose_name='relation')),
            ],
            options={
                'verbose_name': 'Kinship',
                'verbose_name_plural': 'Kinships',
                'unique_together': {('kinship_person', 'kinshiper')},
            },
        ),
    ]
